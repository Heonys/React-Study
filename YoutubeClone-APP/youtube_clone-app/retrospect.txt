YoutubeCloneAPP 회고


1. api 관리  
이전 프로젝트에서 api별로 파일을 만드니까 파일이 많아지고 구분히 힘든게 조금 있었는데
공통의 클래스로 만들어서 같은 클래스 멤버를 쓸 수 있도록 지정하여 상태를 관리하고 ex) axios.create 
메소드를 만들어서 사용하는 컴포넌트에서 인스턴스를 생성해서 메소드를 사용하는 방식이 기존의 Javascript 와는 
방식이 엄청 다르다고 느껴졌고 신선하고 약간의 충격이였던 것 같다  매우편하고 다음에 이런방식을 고려해볼 것 같다

2. 상태관리 
useContext쓸때 create를 만들고 provider 만들어서 children 을 받아서 리턴하고 
커스텀훅 으로 value를 쓰는 -> 이모든 작업을 한파일에서 관리하고 export하니까 엄청 편했던 것 같다
하지만 어플리케이션이 훨씬 복잡해지면 context api 보다 redux나 recoil 같은 상태관리 라이브러리를 쓰는게 좋을 것 같기 때문에
간단한 어플리케이션 이라면 이방식이 좋은 것 같다

3. 캐싱전략 
react-query의 서버 상태를 관리한다는 말을 잘 이해하지 못하고 꼭 써야하나? 라고 생각했었는데
이번에 직접 사용해보니까 아.. 이래서 사용하는구나 라고 느꼈고 아직  react-query의 아주 일부분만 사용해봤지만,
크게 어려운것은 없었고 useQuery의 옵션들을 좀 더 살펴봐야할 것 같다. 

4. react-router
사실 라우터는 꼭 필요한 기능이면서 관심을 크게 못가졌는데 라우터가 6.대 버전으로 바뀌면서 공부해야할 필요성을 느꼈다
예전에 vue 공부 했을때랑은 좀 동작이 달라서 당황했지만, 특히 outlet 부분을 통해서 화면바뀐는 곳을 지정해 주는 것이 재밌었고
기존의 useParams밖에 몰랐었는데 usenavigate로 데이터를 넘기고 useLocation으로 받을 수 있구나 라는 것을 배웠다.

5. tailwind 
퍼블리싱은 역시나 어려운 것 같다. 이번에 퍼블리싱을 하면서 중요성을 더 깨닳은 것 같고 역시 클론코딩을 많이 해봐야 겠구나 생각했다
tailwind는 굉장히 편한것 같고 config파일에서 플러그인을 추가하는 것을 처음해봤고 pure css 에서도 @apply를 통해서 tailwind를 쓰는걸 배웠다

6. 느낀점 
이번에 youtube open api를 사용했는데 공식문서 보는게 가장 힘들었던 것 같아서 아직 한참 부족하구나 라는 것을 느꼈고
비단 이번 프로젝트에서 만은 아니지만 최근에 남의 코드를 보면서 짧은 코드가 아닌 읽기쉬운 코드를 짜야된다고 생각했다
그래서 변수명의 중요성과 약간의 중복이 있더라도 가독성이 높은 코드가 좋다라고 느꼈다 




